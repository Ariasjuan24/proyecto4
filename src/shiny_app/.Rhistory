# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Bucle para actualización en tiempo real
while (TRUE) {
# Obtener nuevos datos
current_progress <- progress_collection$find()
current_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
# Comparar datos para detectar cambios
progress_changed <- !identical(last_progress, current_progress)
users_changed <- !identical(last_users, current_users)
if (progress_changed || users_changed) {
cat("Datos cambiados, regenerando gráficos...\n")
generate_plots(current_progress, current_users)
last_progress <- current_progress
last_users <- current_users
} else {
cat("No hay cambios en los datos.\n")
}
# Esperar 10 segundos antes de la siguiente verificación
Sys.sleep(10)
}
# Detener el servidor al salir (esto no se ejecutará en un bucle infinito, pero lo dejamos por completitud)
stopServer(server)
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Bucle para actualización en tiempo real
while (TRUE) {
# Obtener nuevos datos
current_progress <- progress_collection$find()
current_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
# Comparar datos para detectar cambios
progress_changed <- !identical(last_progress, current_progress)
users_changed <- !identical(last_users, current_users)
if (progress_changed || users_changed) {
cat("Datos cambiados, regenerando gráficos...\n")
generate_plots(current_progress, current_users)
last_progress <- current_progress
last_users <- current_users
} else {
cat("No hay cambios en los datos.\n")
}
# Esperar 10 segundos antes de la siguiente verificación
Sys.sleep(10)
}
# Detener el servidor al salir (esto no se ejecutará en un bucle infinito, pero lo dejamos por completitud)
stopServer(server)
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Bucle para actualización en tiempo real
while (TRUE) {
# Obtener nuevos datos
current_progress <- progress_collection$find()
current_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
# Comparar datos para detectar cambios
progress_changed <- !identical(last_progress, current_progress)
users_changed <- !identical(last_users, current_users)
if (progress_changed || users_changed) {
cat("Datos cambiados, regenerando gráficos...\n")
generate_plots(current_progress, current_users)
last_progress <- current_progress
last_users <- current_users
} else {
cat("No hay cambios en los datos.\n")
}
# Esperar 10 segundos antes de la siguiente verificación
Sys.sleep(10)
}
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
library(httpuv)
app <- list(
onWSOpen = function(ws) {
ws$send("Datos procesados y guardados en progress_data.json y .png")
},
staticPaths = list("/" = ".")
)
runServer("0.0.0.0", 8080, app)
# Instalar y cargar bibliotecas necesarias
if (!requireNamespace("mongolite", quietly = TRUE)) install.packages("mongolite")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("httpuv", quietly = TRUE)) install.packages("httpuv")
library(mongolite)
library(ggplot2)
library(httpuv)
# Configurar conexión a MongoDB
mongo_url <- "mongodb+srv://21030149:123@cluster0.6trvumx.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
progress_collection <- mongo(collection = "progreso_usuarios", db = "test", url = mongo_url)
users_collection <- mongo(collection = "usuarios", db = "test", url = mongo_url)
# Función para generar las gráficas
generate_plots <- function(progress, users) {
# Unir datos
progress$userId <- as.character(progress$userId)
users$`_id` <- as.character(users$`_id`)
progress_by_user <- merge(progress, users, by.x = "userId", by.y = "_id", all.x = TRUE)
if (nrow(progress_by_user) == 0) {
cat("No se encontraron datos para unir.\n")
return()
}
# Calcular total_progress
progress_by_user <- aggregate(progress_by_user$progress, by = list(userId = progress_by_user$userId), FUN = sum, na.rm = TRUE)
colnames(progress_by_user) <- c("userId", "total_progress")
progress_by_user <- merge(progress_by_user, users, by.x = "userId", by.y = "_id", all.x = TRUE)
# Promedio por vocal
vocal_progress <- aggregate(progress$progress, by = list(vocal = progress$vocal), FUN = mean, na.rm = TRUE)
colnames(vocal_progress) <- c("vocal", "mean_progress")
# Generar gráficos
cat("Generando gráficos...\n")
p1 <- ggplot(progress_by_user, aes(x = nombre, y = total_progress, fill = nombre)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Total de Aciertos por Usuario", x = "Usuario", y = "Aciertos Totales")
ggsave("progress_by_user.png", plot = p1, width = 10, height = 6)
p2 <- ggplot(vocal_progress, aes(x = vocal, y = mean_progress, fill = vocal)) +
geom_bar(stat = "identity") +
labs(title = "Promedio de Aciertos por Vocal", x = "Vocal", y = "Promedio de Aciertos")
ggsave("progress_by_vocal.png", plot = p2, width = 10, height = 6)
}
# Obtener datos iniciales
last_progress <- progress_collection$find()
last_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
generate_plots(last_progress, last_users)
# Iniciar servidor
cat("Iniciando servidor en http://0.0.0.0:8080...\n")
app <- list(
staticPaths = list("/" = staticPath(".")),
onWSOpen = function(ws) {
ws$send("Imágenes generadas")
}
)
# Iniciar el servidor en un proceso separado para que no bloquee el bucle
server <- startServer("0.0.0.0", 8080, app)
# Bucle para actualización en tiempo real
while (TRUE) {
# Obtener nuevos datos
current_progress <- progress_collection$find()
current_users <- users_collection$find(fields = '{"_id": true, "nombre": true, "email": true, "password": true, "fecha_registro": true, "isAdmin": true}')
# Comparar datos para detectar cambios
progress_changed <- !identical(last_progress, current_progress)
users_changed <- !identical(last_users, current_users)
if (progress_changed || users_changed) {
cat("Datos cambiados, regenerando gráficos...\n")
generate_plots(current_progress, current_users)
last_progress <- current_progress
last_users <- current_users
} else {
cat("No hay cambios en los datos.\n")
}
# Esperar 10 segundos antes de la siguiente verificación
Sys.sleep(10)
}
install.packages(c("ggplot2", "dplyr"))
R.version.string
Sys.getenv("PATH")
install.packages(c("ggplot2", "base64enc", "png"))
sessionInfo()
sessionInfo()
install.packages(c("ggplot2", "base64enc", "png"))
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("Rcpp")
install.packages(c("ggplot2", "dplyr"))
install.packages(c("ggplot2", "jsonlite"))
shiny::runApp('sem8/HDnoE/proyecto4/src/shiny_app')
setwd("c:/Users/juana/OneDrive/Documentos/sem8/HDnoE/proyecto4/src/shiny_app")
shiny::runApp(port = 5318)
setwd("c:/Users/juana/OneDrive/Documentos/sem8/HDnoE/proyecto4/src/shiny_app")
result <- source("app.R", local = TRUE)$value
print(class(result))
}
runApp('~/sem8/HDnoE/proyecto4/src/shiny_app')
runApp('~/sem8/HDnoE/proyecto4/src/shiny_app')
setwd("c:/Users/juana/OneDrive/Documentos/sem8/HDnoE/proyecto4/src/shiny_app")
shiny::runApp(port = 5318)
